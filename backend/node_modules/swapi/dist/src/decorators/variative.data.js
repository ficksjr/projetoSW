Object.defineProperty(exports, "__esModule", { value: true });
const helpers_1 = require("../helpers");
const storage_1 = require("../storage");
const types_1 = require("../types");
function BodyIsArray(target, methodName) {
    const nodeName = target.constructor.name;
    const storageInstance = storage_1.NodeStorage.getInstance();
    storageInstance.markBodyAsArray(nodeName, methodName);
}
exports.BodyIsArray = BodyIsArray;
function BodyIsObject(target, methodName) {
    setBodyType(target, methodName, types_1.Types.Object);
}
exports.BodyIsObject = BodyIsObject;
function BodyIsString(target, methodName) {
    setBodyType(target, methodName, types_1.Types.String);
}
exports.BodyIsString = BodyIsString;
function BodyIsNumber(target, methodName) {
    setBodyType(target, methodName, types_1.Types.Number);
}
exports.BodyIsNumber = BodyIsNumber;
function setBodyType(target, methodName, type) {
    const nodeName = target.constructor.name;
    const storageInstance = storage_1.NodeStorage.getInstance();
    storageInstance.setBodyType(nodeName, methodName, types_1.Types.String);
}
function Param(name, type) {
    return VariativeDataDecorator(name, types_1.ParameterLocation.UrlPath, type);
}
exports.Param = Param;
function Query(name, type, required) {
    return VariativeDataDecorator(name, types_1.ParameterLocation.Query, type, required);
}
exports.Query = Query;
function Body(name, type, required) {
    return VariativeDataDecorator(name, types_1.ParameterLocation.Body, type, required);
}
exports.Body = Body;
function VariativeDataDecorator(name, location, type, required) {
    return (target, endpointName, descriptor) => {
        const nodeName = target.constructor.name;
        const storageInstance = storage_1.NodeStorage.getInstance();
        if (typeof name === 'string' && helpers_1.isReference(name)) {
            storageInstance.setBodyType(nodeName, endpointName, name);
            return;
        }
        let addParam;
        if (location === types_1.ParameterLocation.Body) {
            addParam = storageInstance.upsertBodyParam;
        }
        else if (location === types_1.ParameterLocation.Query) {
            addParam = storageInstance.upsertQueryParam;
        }
        else if (location === types_1.ParameterLocation.UrlPath) {
            addParam = storageInstance.upsertUrlParam;
        }
        if (typeof name === 'string') {
            const param = helpers_1.generateParamMeta(name, type, required);
            addParam.call(storageInstance, nodeName, endpointName, param);
        }
        else {
            Object
                .entries(name)
                .forEach(([name, type]) => {
                const param = helpers_1.generateParamMeta(name, type, required);
                addParam.call(storageInstance, nodeName, endpointName, param);
            });
        }
    };
}
//# sourceMappingURL=variative.data.js.map