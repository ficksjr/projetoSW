import { Node, Endpoint, HttpMethods, Parameter, Response, Hashtable, ResponseType, ParameterLocation, Types } from '../types';
export declare class NodeStorage {
    private static instance;
    private _nodes;
    private _types;
    readonly nodes: Node[];
    readonly types: ResponseType[];
    static getInstance(): NodeStorage;
    private constructor();
    addNode(node: Node): void;
    createNode(name: string, path: string, relatedTo?: string, endpoints?: Array<Endpoint>, combiner?: string): Node;
    upsertNode(node: Node): void;
    addEndpoint(nodeName: string, endpoint: Endpoint): void;
    createEndpoint(nodeName: string, name: string, path: string, method: HttpMethods, description?: string): Endpoint;
    upsertEndpoint(nodeName: string, endpointName: string, endpoint: Endpoint): void;
    complementEndpoint(nodeName: string, endpointName: string, endpoint: Endpoint): void;
    addEndpointParam(nodeName: string, endpointName: string, param: Parameter, location: ParameterLocation): void;
    createEndpointParam(nodeName: string, endpointName: string, name: string, type: string, required: boolean, location: ParameterLocation): Parameter;
    upsertEndpointParam(nodeName: string, endpointName: string, param: Parameter, location: ParameterLocation): void;
    addQueryParam(nodeName: string, endpointName: string, param: Parameter): void;
    createQueryParam(nodeName: string, endpointName: string, name: string, type: string, required?: boolean): void;
    upsertQueryParam(nodeName: string, endpointName: string, param: Parameter): void;
    addUrlParam(nodeName: string, endpointName: string, param: Parameter): void;
    createUrlParam(nodeName: string, endpointName: string, name: string, type: string): void;
    upsertUrlParam(nodeName: string, endpointName: string, param: Parameter): void;
    setUrlParamFromFullPath(nodeName: string, endpointName: string): void;
    addBodyParam(nodeName: string, endpointName: string, param: Parameter): void;
    createBodyParam(nodeName: string, endpointName: string, name: string, type: string, required?: boolean): void;
    upsertBodyParam(nodeName: string, endpointName: string, param: Parameter): void;
    setBodyType(nodeName: string, endpointName: string, type: Types | string): void;
    markBodyAsArray(nodeName: string, endpointName: string): void;
    setBodyTypeIfEmpty(nodeName: string, endpointName: string, type: Types): void;
    addResponse(nodeName: string, endpointName: string, response: Response): void;
    createResponse(nodeName: string, endpointName: string, status: number, responseType?: Types, isArray?: boolean, description?: string): Response;
    upsertResponse(nodeName: string, endpointName: string, status: number, response: Response): void;
    addResponseType(type: ResponseType): void;
    createResponseType(name: string, typeScheme: Hashtable<string>, type: Types): ResponseType;
    findNodeByName(name: string): Node;
    findOrCreateNodeByName(name: string): Node;
    findEndpointByName(nodeName: string, endpointName: string): Endpoint;
    findOrCreateEndpointByName(nodeName: string, endpointName: string): Endpoint;
    findResponseByStatus(nodeName: string, endpointName: string, status: number): Response;
    findOrCreateResponseByStatus(nodeName: string, endpointName: string, status: number): Response;
    findResponseType(name: string): ResponseType;
    findParameterByLocationAndName(nodeName: string, endpointName: string, location: ParameterLocation, name: string): Parameter;
    findOrCreateParameterByLocationAndName(nodeName: string, endpointName: string, location: ParameterLocation, name: string): Parameter;
    getNodeFullPath(nodeName: string): string;
}
