var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const src_1 = require("../src");
const storage_1 = require("../src/storage");
describe('abstract routes', () => {
    let AbstractEntity = class AbstractEntity {
        getById() {
        }
        create() {
        }
        ;
    };
    __decorate([
        src_1.Get('/:id/'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], AbstractEntity.prototype, "getById", null);
    __decorate([
        src_1.Post('/'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], AbstractEntity.prototype, "create", null);
    AbstractEntity = __decorate([
        src_1.AbstractRouter
    ], AbstractEntity);
    let Student = class Student extends AbstractEntity {
        create() {
        }
    };
    __decorate([
        src_1.Body({ name: 'string*' }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], Student.prototype, "create", null);
    Student = __decorate([
        src_1.BaseUrl('/students/')
    ], Student);
    let Teacher = class Teacher extends AbstractEntity {
        create() {
        }
    };
    __decorate([
        src_1.Body({ name: 'string*', discipline: 'string*' }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], Teacher.prototype, "create", null);
    Teacher = __decorate([
        src_1.BaseUrl('/teachers/')
    ], Teacher);
    it('should contain own routes and abstract routes (student)', () => {
        const storageInstance = storage_1.NodeStorage.getInstance();
        const studentsNode = storageInstance.findNodeByName(Student.name);
        const studentsCreateEndpoint = storageInstance.findEndpointByName(Student.name, 'create');
        expect(studentsNode.endpoints.length).toEqual(2);
        expect(studentsCreateEndpoint).toBeTruthy();
        expect(studentsCreateEndpoint.name).toEqual('create');
        expect(studentsCreateEndpoint.method).toEqual('post');
        expect(studentsCreateEndpoint.path).toEqual('/');
        expect(studentsCreateEndpoint.body.length).toEqual(1);
        expect(studentsCreateEndpoint.body[0].name).toEqual('name');
        expect(studentsCreateEndpoint.body[0].required).toBeTruthy();
        expect(studentsCreateEndpoint.body[0].type).toEqual('string');
    });
    it('should contain own routes and abstract routes (teacher)', () => {
        const storageInstance = storage_1.NodeStorage.getInstance();
        const teachersNode = storageInstance.findNodeByName(Teacher.name);
        const teachersCreateEndpoint = storageInstance.findEndpointByName(Teacher.name, 'create');
        expect(teachersNode.endpoints.length).toEqual(2);
        expect(teachersCreateEndpoint).toBeTruthy();
        expect(teachersCreateEndpoint.name).toEqual('create');
        expect(teachersCreateEndpoint.method).toEqual('post');
        expect(teachersCreateEndpoint.path).toEqual('/');
        expect(teachersCreateEndpoint.body.length).toEqual(2);
    });
});
//# sourceMappingURL=abstract.routes.spec.js.map