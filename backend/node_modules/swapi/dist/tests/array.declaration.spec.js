var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
const src_1 = require("../src");
describe('declaration of array in param/query/body/response', () => {
    let Dog = class Dog {
        createDog() {
        }
        deleteDogs() {
        }
        findOrCreate() {
        }
    };
    __decorate([
        src_1.Post('/'),
        src_1.Body({
            name: 'string*',
            toys: 'string[]*'
        }),
        src_1.Response(201, '#/Dog'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], Dog.prototype, "createDog", null);
    __decorate([
        src_1.Delete('/'),
        src_1.BodyIsArray,
        src_1.BodyIsString,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], Dog.prototype, "deleteDogs", null);
    __decorate([
        src_1.Post('/find-or-create'),
        src_1.Body('#/Dog'),
        src_1.Response(200, '#/Dog'),
        src_1.Response(201, '#/Dog'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], Dog.prototype, "findOrCreate", null);
    Dog = __decorate([
        src_1.BaseUrl('/dogs/')
    ], Dog);
    let Owner = class Owner {
        createOwner() {
        }
    };
    __decorate([
        src_1.Post('/'),
        src_1.Body('name', 'string*'),
        src_1.Body('dogIds', 'string[]*'),
        src_1.Response(201, '#/Owner'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], Owner.prototype, "createOwner", null);
    Owner = __decorate([
        src_1.BaseUrl('/owners/')
    ], Owner);
    beforeAll(() => {
        const dog = {
            id: 'string',
            name: 'string',
            toys: 'string[]',
        };
        const owner = {
            id: 'string',
            name: 'string',
            dogs: '#/Dog[]'
        };
        src_1.addResponseType('Dog', dog);
        src_1.addResponseType('Owner', owner);
        src_1.generateSwaggerYaml();
    });
    it('responses should have array type fields', () => {
        const sw = src_1.generateSwaggerJson();
        expect(sw.definitions.Dog.properties.toys.type).toEqual('array');
        expect(sw.definitions.Dog.properties.toys.items.type).toEqual('string');
        expect(sw.definitions.Owner.properties.dogs.type).toEqual('array');
        expect(sw.definitions.Owner.properties.dogs.items.$ref).toEqual('#/definitions/Dog');
    });
    it('should have body with ref type', () => {
        const sw = src_1.generateSwaggerJson();
        const body = sw.paths['/dogs/find-or-create/']['post'].parameters.find((param) => param.in === 'body');
        expect(body.schema.$ref).toEqual('#/definitions/Dog');
    });
    it('should have array body', () => {
        const sw = src_1.generateSwaggerJson();
        const body = sw.paths['/dogs/']['delete'].parameters.find((param) => param.in === 'body');
        expect(body.schema.type).toEqual('array');
        expect(body.schema.items.type).toEqual('string');
    });
});
//# sourceMappingURL=array.declaration.spec.js.map